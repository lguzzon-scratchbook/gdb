const EARTH_RADIUS_KM = 6371

function extendWithGeoOperators(gdbInstance) {
  console.log('üìç Extending GDB with geolocation operators...')
  const geoOperators = {
    $near: (recordData, nearQuery) => {
      console.log('‚ÑπÔ∏è Geo: Ejecutando operador $near')
      const {
        latitude: targetLatitude,
        longitude: targetLongitude,
        radius: searchRadius
      } = nearQuery
      if (
        typeof targetLatitude !== 'number' ||
        typeof targetLongitude !== 'number' ||
        typeof searchRadius !== 'number'
      ) {
        console.error('‚ùå Geo: Consulta inv√°lida para $near:', nearQuery)
        return false
      }
      const recordLatitude =
        recordData?.latitude || recordData?.location?.latitude
      const recordLongitude =
        recordData?.longitude || recordData?.location?.longitude
      if (
        typeof recordLatitude !== 'number' ||
        typeof recordLongitude !== 'number'
      ) {
        return false
      }
      return (
        calculateHaversineDistanceInKm(
          recordLatitude,
          recordLongitude,
          targetLatitude,
          targetLongitude
        ) <= searchRadius
      )
    },
    $bbox: (recordData, bboxQuery) => {
      console.log('‚ÑπÔ∏è Geo: Ejecutando operador $bbox')
      const {
        minLat: minLatitude,
        maxLat: maxLatitude,
        minLng: minLongitude,
        maxLng: maxLongitude
      } = bboxQuery
      if (
        typeof minLatitude !== 'number' ||
        typeof maxLatitude !== 'number' ||
        typeof minLongitude !== 'number' ||
        typeof maxLongitude !== 'number'
      ) {
        console.error('‚ùå Geo: Consulta inv√°lida para $bbox:', bboxQuery)
        return false
      }
      const recordLatitude =
        recordData?.latitude || recordData?.location?.latitude
      const recordLongitude =
        recordData?.longitude || recordData?.location?.longitude
      if (
        typeof recordLatitude !== 'number' ||
        typeof recordLongitude !== 'number'
      ) {
        return false
      }
      return (
        recordLatitude >= minLatitude &&
        recordLatitude <= maxLatitude &&
        recordLongitude >= minLongitude &&
        recordLongitude <= maxLongitude
      )
    }
  }

  function calculateHaversineDistanceInKm(
    recordLatitude,
    recordLongitude,
    targetLatitude,
    targetLongitude
  ) {
    const convertToRadians = (degrees) => (degrees * Math.PI) / 180
    const latitudeDifferenceRadians = convertToRadians(
      targetLatitude - recordLatitude
    )
    const longitudeDifferenceRadians = convertToRadians(
      targetLongitude - recordLongitude
    )
    const haversineCalculation =
      Math.sin(latitudeDifferenceRadians / 2) *
        Math.sin(latitudeDifferenceRadians / 2) +
      Math.cos(convertToRadians(recordLatitude)) *
        Math.cos(convertToRadians(targetLatitude)) *
        Math.sin(longitudeDifferenceRadians / 2) *
        Math.sin(longitudeDifferenceRadians / 2)
    return (
      Math.atan2(
        Math.sqrt(haversineCalculation),
        Math.sqrt(1 - haversineCalculation)
      ) *
      2 *
      EARTH_RADIUS_KM
    )
  }

  gdbInstance.operators = {
    ...gdbInstance.operators,
    ...geoOperators
  }
  return gdbInstance
}

const initializeGeoModule = (gdbInstance) => {
  console.log('‚úÖ Geo: + Geolocation operators.')
  return extendWithGeoOperators(gdbInstance)
}

export { extendWithGeoOperators as withModule, initializeGeoModule as init }
