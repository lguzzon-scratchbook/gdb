function InvertedIndexer(options) {
  const invertedIndex = {}
  const worker = options.worker
  const indexFileName = options.indexFileName || 'inverted_index.msgpack'
  const encode = options.encode
  const decode = options.decode
  const pako = options.pako
  const debouncedSave = ((callback, delay) => {
    let timeoutId
    return (...args) => {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => callback.apply(null, args), delay)
    }
  })(() => saveIndex(), 200)
  async function loadIndex() {
    try {
      const compressedData = await new Promise((resolve, reject) => {
        const messageHandler = (event) => {
          if (
            event.data.type === 'loaded' &&
            event.data.name === indexFileName
          ) {
            worker.removeEventListener('message', messageHandler)
            resolve(new Uint8Array(event.data.data))
          } else if (event.data.type === 'error') {
            worker.removeEventListener('message', messageHandler)
            reject(new Error(event.data.message))
          }
        }
        worker.addEventListener('message', messageHandler)
        worker.postMessage({
          type: 'load',
          name: indexFileName
        })
      })
      if (compressedData.byteLength > 0) {
        if (!decode || !pako) {
          throw new Error(
            'InvertedIndexer: decode y pako deben estar en options'
          )
        }
        const decompressedData = pako.inflate(compressedData)
        const parsedIndex = decode(decompressedData)
        Object.assign(invertedIndex, parsedIndex)
        return true
      }
    } catch {}
    return false
  }
  async function saveIndex() {
    try {
      if (!encode || !pako) {
        throw new Error('InvertedIndexer: encode y pako deben estar en options')
      }
      const encodedData = encode(invertedIndex)
      const compressedData = pako.deflate(encodedData)
      await new Promise((resolve, reject) => {
        const messageHandler = (event) => {
          if (
            event.data.type === 'saved' &&
            event.data.name === indexFileName
          ) {
            worker.removeEventListener('message', messageHandler)
            resolve()
          } else if (event.data.type === 'error') {
            worker.removeEventListener('message', messageHandler)
            reject(new Error(event.data.message))
          }
        }
        worker.addEventListener('message', messageHandler)
        worker.postMessage({
          type: 'save',
          name: indexFileName,
          content: compressedData
        })
      })
    } catch {}
  }
  async function initializeIndex() {
    ;(typeof options.graph?.getAllNodes === 'function'
      ? await options.graph.getAllNodes()
      : Object.values(options.graph.nodes)
    ).forEach((node) => updateIndex(node.id, node.value, 'insert', false))
    debouncedSave()
  }
  function setupRealtimeUpdates() {
    options.map(
      {
        realtime: true
      },
      (change) => {
        if (change.action === 'added' || change.action === 'updated') {
          updateIndex(change.id, change.value, 'insert', true)
        } else if (change.action === 'removed') {
          updateIndex(change.id, change.value, 'remove', true)
        }
      }
    )
  }
  function updateIndex(
    nodeId,
    nodeValue,
    operation = 'insert',
    shouldSave = true
  ) {
    const tokens = extractTokens(nodeValue)
    if (operation === 'insert') {
      tokens.forEach((token) => {
        if (!invertedIndex[token]) {
          invertedIndex[token] = []
        }
        if (!invertedIndex[token].includes(nodeId)) {
          invertedIndex[token].push(nodeId)
        }
      })
    } else if (operation === 'remove') {
      tokens.forEach((token) => {
        if (invertedIndex[token]) {
          invertedIndex[token] = invertedIndex[token].filter(
            (id) => id !== nodeId
          )
          if (invertedIndex[token].length === 0) {
            delete invertedIndex[token]
          }
        }
      })
    }
    if (shouldSave) {
      debouncedSave()
    }
  }
  function extractTokens(value) {
    if (typeof value === 'string') {
      return Array.from(
        {
          length: value.length
        },
        (_unused, index) => value.substring(0, index + 1)
      )
    }
    if (typeof value === 'number') {
      return [String(value)]
    }
    if (typeof value === 'object' && value !== null) {
      return Object.keys(value)
    }
    return []
  }
  function searchAllByPrefix(prefix) {
    return Object.keys(invertedIndex)
      .filter((token) => token.startsWith(prefix))
      .flatMap((token) => invertedIndex[token])
  }
  return {
    ready: loadIndex().then((indexLoaded) => {
      if (!indexLoaded) {
        initializeIndex()
      }
      setupRealtimeUpdates()
    }),
    updateIndex: updateIndex,
    searchAllByPrefix: searchAllByPrefix
  }
}
var init = (options) => {
  console.log('ðŸŒ³ InvertedIndexer module loaded.')
  const indexerInstance = InvertedIndexer(options)
  options.searchByPrefix = async (prefix) => {
    await indexerInstance.ready
    return indexerInstance
      .searchAllByPrefix(prefix)
      .map((nodeId) => options.graph.get(nodeId))
  }
  return options
}
export { init, InvertedIndexer }
