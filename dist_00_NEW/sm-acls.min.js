async function Z(securityManager, options) {
  console.info('üõ°Ô∏è [SM-ACLs] Starting ACL module...')
  try {
    const aclModule = await X(securityManager, options)
    if (aclModule) {
      try {
        Object.defineProperty(securityManager.sm, 'acls', {
          value: aclModule,
          writable: true,
          enumerable: false,
          configurable: true
        })
        console.info(
          'üõ°Ô∏è [SM-ACLs] Module initialized and attached to gdb.sm.acls.'
        )
      } catch (attachmentError) {
        console.error(
          '‚ùå [SM-ACLs] Failed to attach: gdb.sm not extensible.',
          attachmentError.message
        )
        throw new Error(
          '‚ùå [SM-ACLs] Cannot attach ACL module to gdb.sm. Ensure gdb.sm is extensible.'
        )
      }
    } else {
      console.warn('‚ö†Ô∏è [SM-ACLs] Module not activated (options missing).')
    }
  } catch (initializationError) {
    console.error(
      '‚ùå [SM-ACLs] Failed to start ACL module.',
      initializationError
    )
    throw initializationError
  }
}
var X = async (securityManager, options) => {
  if (!options) {
    return null
  }
  const OWNER_FIELD = 'owner'
  const COLLABORATORS_FIELD = 'collaborators'
  const getActiveUser = () => {
    const activeAddress = securityManager.sm.getActiveEthAddress()
    if (!activeAddress) {
      throw new Error('‚ùå [SM-ACLs] Active user session required.')
    }
    return activeAddress
  }
  const createPermissionError = (action) =>
    new Error(`\u274C [SM-ACLs] Only the owner can ${action}.`)
  const aclMiddleware = async (operations, graph) => {
    const allowedOperations = []
    for (const operation of operations) {
      const {
        signer: operationSigner,
        type: operationType,
        id: nodeId
      } = operation
      if (!operationSigner || !nodeId) {
        allowedOperations.push(operation)
        continue
      }
      const nodeData = graph.get(nodeId)
      const {
        [OWNER_FIELD]: ownerAddress,
        [COLLABORATORS_FIELD]: collaborators = {}
      } = nodeData?.value || {}
      if (operationType === 'put') {
        if (
          !nodeData ||
          operationSigner === ownerAddress ||
          collaborators[operationSigner] === 'write'
        ) {
          allowedOperations.push(operation)
        } else {
          console.warn(
            `\u26A0\uFE0F [SM-ACLs] DENIED (put): ${operationSigner} \u2192 ${nodeId}`
          )
        }
        continue
      }
      if (operationType === 'remove') {
        if (
          !nodeData ||
          ownerAddress === undefined ||
          operationSigner === ownerAddress
        ) {
          allowedOperations.push(operation)
        } else {
          console.warn(
            `\u26A0\uFE0F [SM-ACLs] DENIED (remove): ${operationSigner} \u2192 ${nodeId}`
          )
        }
        continue
      }
      allowedOperations.push(operation)
    }
    return allowedOperations
  }
  securityManager.use(aclMiddleware)
  return {
    async set(nodeValue, nodeId) {
      const currentUser = getActiveUser()
      const { result: existingNode } = await securityManager.get(nodeId)
      if (existingNode) {
        const {
          [OWNER_FIELD]: nodeOwner,
          [COLLABORATORS_FIELD]: collaborators = {}
        } = existingNode.value
        if (
          currentUser !== nodeOwner &&
          collaborators[currentUser] !== 'write'
        ) {
          throw new Error(
            `\uD83D\uDEE1\uFE0F [SM-ACLs] Write denied for node ${nodeId}.`
          )
        }
        const {
          [OWNER_FIELD]: ownerField,
          [COLLABORATORS_FIELD]: collaboratorsField,
          ...nodeValueOnly
        } = nodeValue
        return securityManager.put(
          {
            ...existingNode.value,
            ...nodeValueOnly
          },
          nodeId
        )
      }
      return securityManager.put(
        {
          ...nodeValue,
          [OWNER_FIELD]: currentUser,
          [COLLABORATORS_FIELD]: {}
        },
        nodeId
      )
    },
    async grant(nodeId, collaboratorAddress, permissionLevel) {
      const currentUser = getActiveUser()
      if (!['read', 'write'].includes(permissionLevel)) {
        throw new Error("üõ°Ô∏è [SM-ACLs] Permission must be 'read' or 'write'.")
      }
      const { result: targetNode } = await securityManager.get(nodeId)
      if (!targetNode) {
        throw new Error(`\u274C [SM-ACLs] Node ${nodeId} not found.`)
      }
      if (targetNode.value[OWNER_FIELD] !== currentUser) {
        throw createPermissionError('grant permissions')
      }
      const updatedCollaborators = {
        ...(targetNode.value[COLLABORATORS_FIELD] ?? {}),
        [collaboratorAddress]: permissionLevel
      }
      await securityManager.put(
        {
          ...targetNode.value,
          [COLLABORATORS_FIELD]: updatedCollaborators
        },
        nodeId
      )
    },
    async revoke(nodeId, collaboratorAddress) {
      const currentUser = getActiveUser()
      const { result: targetNode } = await securityManager.get(nodeId)
      if (!targetNode) {
        throw new Error(`\u274C [SM-ACLs] Node ${nodeId} not found.`)
      }
      if (targetNode.value[OWNER_FIELD] !== currentUser) {
        throw createPermissionError('revoke permissions')
      }
      const {
        [collaboratorAddress]: removedCollaborator,
        ...remainingCollaborators
      } = targetNode.value[COLLABORATORS_FIELD] ?? {}
      await securityManager.put(
        {
          ...targetNode.value,
          [COLLABORATORS_FIELD]: remainingCollaborators
        },
        nodeId
      )
    },
    async delete(nodeId) {
      const currentUser = getActiveUser()
      const { result: targetNode } = await securityManager.get(nodeId)
      if (!targetNode) {
        return
      }
      if (targetNode.value[OWNER_FIELD] !== currentUser) {
        throw createPermissionError('delete this node')
      }
      await securityManager.remove(nodeId)
    },
    async getPermissions(nodeId) {
      const { result: targetNode } = await securityManager.get(nodeId)
      if (!targetNode || targetNode.value[OWNER_FIELD] === undefined) {
        return null
      }
      return {
        owner: targetNode.value[OWNER_FIELD],
        collaborators: targetNode.value[COLLABORATORS_FIELD] ?? {}
      }
    }
  }
}
export { Z as start, X as createAclModule }
